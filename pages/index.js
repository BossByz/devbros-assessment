import { Menu } from '@headlessui/react';
import Head from 'next/head';
import { useState } from 'react';
import BikeList from '../components/bikeList';
import styles from '../styles/Home.module.css';

// Server side code, get data before displaying page
export async function getStaticProps() {
  // Fetch JSON data from file
  const res = await fetch('http://localhost:3000/api/bikes')
  const data = await res.json();
  return {
    props: {
      bikes: data
    }
  }
}

export default function Home({ bikes }) {
  // State management for data
  const [bikesList, setBikesList] = useState(bikes);
  const [sortBy, setSortBy] = useState('Default')

  return (
    <div className="bg-gray-900">
      <Head>
        {/* Set title, SEO, and favicon */}
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {/* Heading */}
        <h1 className={styles.title}>
          Welcome to the <a className='font-bold uppercase'>bike store!</a>
        </h1>

        {/* Headless UI drop down (for sorting functionality) */}
        <Menu>
          <Menu.Button className={"bg-slate-700 p-2 m-2 rounded hover:bg-blue-500"}>Sort By {sortBy}</Menu.Button>
          {/* Can be made shorter, by creating a list of filters and mapping to that list */}
          <Menu.Items className={'bg-slate-700 rounded p-2 m-2 max-w-4xl w-full text-center'}>
            {sortBy !== 'Default' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => a.BikeID - b.BikeID)); setSortBy('Default'); }}
                >
                  Default
                </button>
              )}
            </Menu.Item>}
            {sortBy !== 'Price (Asc)' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => a.Price - b.Price)); setSortBy('Price (Asc)'); }}
                >
                  Price (Asc)
                </button>
              )}
            </Menu.Item>}
            {sortBy !== 'Price (Desc)' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => b.Price - a.Price)); setSortBy('Price (Desc)'); }}
                >
                  Price (Desc)
                </button>
              )}
            </Menu.Item>}
            {sortBy !== 'Year (Asc)' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => a.Year - b.Year)); setSortBy('Year (Asc)'); }}
                >
                  Year (Asc)
                </button>
              )}
            </Menu.Item>}
            {sortBy !== 'Year (Desc)' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => b.Year - a.Year)); setSortBy('Year (Desc)'); }}
                >
                  Year (Desc)
                </button>
              )}
            </Menu.Item>}
            {sortBy !== 'Displacement (Asc)' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => a.Displacement - b.Displacement)); setSortBy('Displacement (Asc)'); }}
                >
                  Displacement (Asc)
                </button>
              )}
            </Menu.Item>}
            {sortBy !== 'Displacement (Desc)' && <Menu.Item>
              {({ active }) => (
                <button
                  className={`${active && 'bg-blue-500'} m-2 p-2 rounded`}
                  onClick={() => { setBikesList([...bikesList].sort((a, b) => b.Displacement - a.Displacement)); setSortBy('Displacement (Desc)'); }}
                >
                  Displacement (Desc)
                </button>
              )}
            </Menu.Item>}
          </Menu.Items>
        </Menu>

        {/* Bike list component */}
        <BikeList bikes={bikesList}></BikeList>
      </main>

      {/* Footer */}
      <footer className={styles.footer}>
          DEVELOPED BY BYRON
      </footer>
    </div>
  )
}
